{
    "name": "vs-qalc",
    "displayName": "Qalc",
    "description": "Interactive scratchpad calculator for VSCode",
    "publisher": "nortakales",
    "version": "0.4.3",
    "engines": {
        "vscode": "^1.85.0"
    },
    "keywords": [
        "calc",
        "calculator",
        "math",
        "qalc",
        "mathpad",
        "numi",
        "parsify",
        "scratchpad",
        "notebook"
    ],
    "categories": [
        "Other"
    ],
    "extensionKind": [
        "ui",
        "workspace"
    ],
    "homepage": "https://github.com/nortakales/vs-code-qalc",
    "repository": {
        "type": "git",
        "url": "https://github.com/nortakales/vs-code-qalc.git"
    },
    "sponsor": {
        "url": "https://www.buymeacoffee.com/nortakales"
    },
    "bugs": {
        "url": "https://github.com/nortakales/vs-code-qalc/issues"
    },
    "icon": "resources/icon.png",
    "activationEvents": [
        "onStartupFinished"
    ],
    "contributes": {
        "languages": [
            {
                "id": "qalc",
                "aliases": [
                    "Qalc"
                ],
                "extensions": [
                    ".qalc"
                ],
                "configuration": "./language/language-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "qalc",
                "scopeName": "source.qalc",
                "path": "./syntaxes/qalc.tmGrammar.json"
            }
        ],
        "commands": [
            {
                "command": "qalc.copy.withDelimiter",
                "title": "Copy With Result (with delimiter)",
                "category": "Qalc"
            },
            {
                "command": "qalc.copy.withoutDelimiter",
                "title": "Copy With Result (without delimiter)",
                "category": "Qalc"
            },
            {
                "command": "qalc.copy.resultOnly",
                "title": "Copy Result Only",
                "category": "Qalc"
            }
        ],
        "configuration": {
            "title": "Qalc",
            "properties": {
                "qalc.output.color": {
                    "title": "Output Color",
                    "type": "string",
                    "default": "",
                    "description": "Set a custom color for output to display in. This can be either a hex value (e.g. \"#FFFFFF\"), rgb value (e.g. \"rgb(255,255,255)\"), or a VSCode ThemeColor id (e.g. \"editor.foreground\", see https://code.visualstudio.com/docs/getstarted/theme-color-reference for available ids). If no color is specified, this falls back to \"terminal.ansiGreen\" to get the green  matching your current UI theme."
                },
                "qalc.output.showDelimiter": {
                    "title": "Show Output Delimiter",
                    "type": "boolean",
                    "default": false,
                    "description": "Controls whether or not to display the delimiter to separate input from output. Default delimiter is \"=\" and can be overriden with the \"qalc.output.delimiter\" setting."
                },
                "qalc.output.delimiter": {
                    "title": "Output Delimiter",
                    "type": "string",
                    "default": "=",
                    "description": "Delimiter to display between input and output. Can be turned on/off with the \"qalc.output.showDelimiter\" setting."
                },
                "qalc.output.align": {
                    "title": "Align Output",
                    "type": "boolean",
                    "default": true,
                    "description": "Aligns the left edge of output (on) or displays output immediately at the end of an input line (off)."
                },
                "qalc.output.maxAlignmentColumn": {
                    "title": "Max Alignment Column",
                    "type": "number",
                    "default": 40,
                    "description": "When \"qalc.output.align\" is on, this controls the maximum column that results will align on. This is useful if you have, for example, a Markdown document with a few long lines, but don't want your Qalc results displayed too far out for the majority of your shorter lines."
                },
                "qalc.output.digitGroupingSymbol": {
                    "title": "Digit Grouping Symbol",
                    "type": "string",
                    "default": ",",
                    "description": "Character that groups the digits, usually comma (1,000), space (1 000) or nothing at all (1000). This setting replaces 'qalc.output.displayCommas'.",
                    "minLength": 0,
                    "maxLength": 1
                },
                "qalc.output.decimalSeparator": {
                    "title": "Decimal Separator",
                    "type": "string",
                    "default": ".",
                    "description": "Character separating the decimals, usually dot (3.14) or comma (3,14).",
                    "minLength": 1,
                    "maxLength": 1
                },
                "qalc.output.trimTrailingZeros": {
                    "title": "Trim Trailing Zeros",
                    "type": "boolean",
                    "default": true,
                    "description": "Turn this on to trim trailing zeros when using 'fixed' notation. For example, with 'fixed' notation, precision set to 4, and this setting off, 1.12 will display as 1.1200, but with the setting on will display 1.12."
                },
                "qalc.output.precision": {
                    "title": "Precision",
                    "type": "integer",
                    "default": 2,
                    "minimum": 0,
                    "maximum": 16,
                    "description": "Set the precision of the output. In case of notations 'exponential', 'engineering', and 'auto', precision defines the total number of significant digits returned. In case of notation 'fixed', precision defines the number of significant digits after the decimal point. No precision is lost in calculations, only the final display. See https://mathjs.org/docs/reference/functions/format.html for further documentation. Note: When using 'auto' notation, you most likely want to set this to 0."
                },
                "qalc.output.notation": {
                    "title": "Notation",
                    "type": "string",
                    "default": "fixed",
                    "enum": [
                        "fixed",
                        "exponential",
                        "engineering",
                        "auto"
                    ],
                    "description": "Set the notation for display. See https://mathjs.org/docs/reference/functions/format.html for further documentation."
                },
                "qalc.output.lowerExponentBound": {
                    "title": "Lower Exponent Bound",
                    "type": "integer",
                    "default": -9,
                    "minimum": -16,
                    "maximum": 0,
                    "description": "Exponent determining the lower boundary for formatting output with an exponent (e.g. setting this to -2 will format 0.01 as 1e-2."
                },
                "qalc.output.upperExponentBound": {
                    "title": "Upper Exponent Bound",
                    "type": "integer",
                    "default": 16,
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Exponent determining the upper boundary for formatting output with an exponent (e.g. setting this to 2 will format 100 as 1e+2)."
                },
                "qalc.currency.convertLocal": {
                    "title": "Convert Local Currency",
                    "type": "boolean",
                    "default": true,
                    "description": "Turn this on to use your local currency symbol in both your input and output. Works with \"qalc.currency.localSymbol\" and \"qalc.currency.localCode\". For example, setting \"$\" and \"USD\" allows your input to contain \"$100\" which will be evaluated as the equivalent of \"100 USD\", and similarly will display in the output as \"$100\" instead of \"100 USD\"."
                },
                "qalc.currency.localSymbol": {
                    "title": "Local Currency Symbol",
                    "type": "string",
                    "default": "$",
                    "description": "Set your local currency symbol. See \"qalc.currency.convertLocal\" for how this is used\".",
                    "minLength": 1
                },
                "qalc.currency.localCode": {
                    "title": "Local Currency Code",
                    "type": "string",
                    "default": "USD",
                    "description": "Set your local currency code. See \"qalc.currency.convertLocal\" for how this is used\".",
                    "minLength": 1
                },
                "qalc.currency.apiKey": {
                    "title": "Currency API Key",
                    "type": "string",
                    "description": "Qalc calls an API for exchange rates that is limited to 1000 calls per month across all Qalc users. If you absolutely require exchange rates and do not want to take a chance that these 1000 calls will run out in a given month, you can get a free API key from openexchangerates.org, and use that key here. Doing so will also refresh your exchanges rates once per day, rather than the default of every 2 weeks."
                },
                "qalc.shortcuts.temperature": {
                    "title": "Temperature Shortcut",
                    "type": "boolean",
                    "default": "true",
                    "description": "When on, enables you to use oF, oC, f, and c as substitutes for degF, degC, fahrenheit, and celsius."
                },
                "qalc.enabledLanguages": {
                    "title": "Enabled Languages",
                    "type": "array",
                    "default": [
                        "qalc",
                        "plaintext",
                        "markdown"
                    ],
                    "contains": {
                        "type": "string"
                    },
                    "description": "Language identifiers for which to enable Qalc processing on. Keep in mind that Qalc will not examine partial line matches, but only full lines. If your full line is not parseable, no output is displayed. For example, if you have a line in a JSON file like \"  'key': '1 + 1'  \", the \"1 + 1\" will not be evaluated because the full line is not parseable. Defaults to [\"qalc\", \"plaintext\", \"markdown\"]."
                },
                "qalc.explicitActivationLanguages": {
                    "title": "Explicit Activation Languages",
                    "type": "array",
                    "default": [],
                    "contains": {
                        "type": "string"
                    },
                    "description": "Language identifiers for which Qalc processing will be off by default but can be enabled using //qalc:on. This should be a subset of \"qalc.enabledLanguages\". In other words, you must first enable the language, and then you can set it to have explicit activation. If a language is enabled, but not marked for explicit activation, Qalc will start processing lines from the beginning. If a language is marked for explicit activation, but not enabled, Qalc will not process files for that language at all."
                },
                "qalc.disabledPatterns": {
                    "title": "Disabled Patterns",
                    "type": "array",
                    "default": [
                        "**/README.md"
                    ],
                    "contains": {
                        "type": "string"
                    },
                    "required": false,
                    "minItems": 0,
                    "description": "A list of glob patterns to disable Qalc processing on. These take precedence over \"qalc.enabledLanguages\", so if you have \"markdown\" enabled, but \"**/README.md\" disabled, you will not get processing on \"README.md\". This is generally useful for any files that might register as \"plaintext\" to VSCode, but you don't want Qalc to run on, like configuration files. Defaults to [\"**/README.md\"]."
                },
                "qalc.globalDeclarations": {
                    "title": "Global Declarations",
                    "type": "array",
                    "default": [],
                    "contains": {
                        "type": "string"
                    },
                    "items": {
                        "type": "string"
                    },
                    "description": "These are declarations that will be available globally to all Qalc files. They are evaluated at the beginning of a file. For example, if you want to make the \"hypotenuse\" function available to all Qalc files, you would add \"hypotenuse(x,y) = sqrt(x^2 + y^2),\" to this list. Defaults to []."
                }
            }
        }
    },
    "main": "./out/extension.js",
    "scripts": {
        "vscode:prepublish": "npm run test",
        "compile": "tsc -p ./",
        "lint": "eslint src --ext ts",
        "watch": "tsc -watch -p ./",
        "pretest": "npm run compile && npm run lint",
        "test": "node ./out/test/testTarget.js"
    },
    "dependencies": {
        "@types/mathjs": "^6.0.5",
        "axios": "^0.21.1",
        "colors": "^1.4.0",
        "mathjs": "^9.5.2"
    },
    "devDependencies": {
        "@types/glob": "^8.1.0",
        "@types/mocha": "^10.0.6",
        "@types/node": "^20.10.5",
        "@types/vscode": "^1.85.0",
        "@typescript-eslint/eslint-plugin": "^6.16.0",
        "@typescript-eslint/parser": "^6.16.0",
        "eslint": "^8.56.0",
        "glob": "^10.3.10",
        "mocha": "^10.2.0",
        "typescript": "^5.3.3",
        "vscode-test": "^1.6.1"
    }
}